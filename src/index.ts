import { LanguageCodegen, MainCodegen, TsCodegen } from "./Codegen";
import Language from "./Language";
import path from "path";
import fse from "fs-extra";
// @ts-ignore: doesnâ€™t deal with json files
import { version } from "../package.json";

interface GeneratedCode {
  [fileName: string]: string;
}

const BANNER =
  `
// DO NOT MODIFY
// FILE GENERATED BY \`intl-codegen@${version}\`
// https://github.com/eversport/intl-codegen
// DO NOT MODIFY
  `.trim() + "\n\n";

interface Options {
  defaultLocale?: string;
}

class IntlCodegen {
  private languages = new Map<string, Language>();
  private defaultLocale: string;

  // TODO: remove fallback to string with v2
  constructor(options: Options | string = {}) {
    if (typeof options === "string") {
      this.defaultLocale = options;
    } else {
      const { defaultLocale = "en" } = options;
      this.defaultLocale = defaultLocale;
    }
    this.getLanguage(this.defaultLocale);
  }

  public getLanguage(locale: string) {
    const { languages } = this;
    let language = languages.get(locale);
    if (!language) {
      language = new Language(locale);
      languages.set(locale, language);
    }
    return language;
  }

  public generateFiles(): GeneratedCode {
    const { languages, defaultLocale } = this;
    const files: { [key: string]: string } = {};

    for (const [locale, language] of languages) {
      const fileName = `${locale}.js`;
      const codegen = new LanguageCodegen(language);
      files[fileName] = BANNER + codegen.generate();
    }

    const mainCodegen = new MainCodegen(languages);
    files["index.js"] = BANNER + mainCodegen.generate(defaultLocale);

    const tsCodegen = new TsCodegen(languages);
    files["index.d.ts"] = BANNER + tsCodegen.generate();

    return files;
  }

  public async writeFiles(outputDirectory: string) {
    const files = this.generateFiles();
    for (const [_fileName, contents] of Object.entries(files)) {
      const fileName = path.join(outputDirectory, _fileName);
      await fse.ensureFile(fileName);
      await fse.outputFile(fileName, contents);
    }
    return files;
  }
}

export default IntlCodegen;
